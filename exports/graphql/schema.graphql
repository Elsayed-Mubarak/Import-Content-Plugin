type Article {
  title: String
  content: String
  email: String
  author: String
  translator: String
  url: String
  channels: String
  ohoto(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  file(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input ArticleInput {
  title: String
  content: String
  email: String
  ohoto: [ID]
  file: [ID]
  author: String
  translator: String
  url: String
  channels: String
}

type Book {
  name: String
  synopsis: String
  image: UploadFile
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input BookInput {
  name: String
  synopsis: String
  image: ID
}

input ContactInput {
  name: String
  adresse: String
  code_postal: String
  city: String
  phone: String
  fax: String
  activities: String
  department: String
  email: String
}

type Contacts {
  name: String
  adresse: String
  code_postal: String
  city: String
  phone: String
  fax: String
  activities: String
  department: String
  email: String
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input createBookInput {
  data: BookInput
}

type createBookPayload {
  book: Book
}

input createContactInput {
  data: ContactInput
}

type createContactPayload {
  contact: Contacts
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

input deleteBookInput {
  where: InputID
}

type deleteBookPayload {
  book: Book
}

input deleteContactInput {
  where: InputID
}

type deleteContactPayload {
  contact: Contacts
}

input deleteImportconfigInput {
  where: InputID
}

type deleteImportconfigPayload {
  importconfig: ImportContentImportconfig
}

input deleteImporteditemInput {
  where: InputID
}

type deleteImporteditemPayload {
  importeditem: ImportContentImporteditem
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editArticleInput {
  title: String
  content: String
  email: String
  ohoto: [ID]
  file: [ID]
  author: String
  translator: String
  url: String
  channels: String
}

input editBookInput {
  name: String
  synopsis: String
  image: ID
}

input editContactInput {
  name: String
  adresse: String
  code_postal: String
  city: String
  phone: String
  fax: String
  activities: String
  department: String
  email: String
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editImportconfigInput {
  date: Date
  source: String
  options: JSON
  contentType: String
  fieldMapping: JSON
  ongoing: Boolean
  importeditems: [ID]
}

input editImporteditemInput {
  ContentType: String
  ContentId: Int
  importconfig: ID
  importedFiles: JSON
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

input ImportconfigInput {
  date: Date
  source: String
  options: JSON
  contentType: String
  fieldMapping: JSON
  ongoing: Boolean
  importeditems: [ID]
}

type ImportContentImportconfig {
  date: Date
  source: String
  options: JSON
  contentType: String
  fieldMapping: JSON
  ongoing: Boolean
  importeditems(sort: String, limit: Int, start: Int, where: JSON): [ImportContentImporteditem]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

type ImportContentImporteditem {
  ContentType: String
  ContentId: Int
  importconfig: ImportContentImportconfig
  importedFiles: JSON
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input ImporteditemInput {
  ContentType: String
  ContentId: Int
  importconfig: ID
  importedFiles: JSON
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | Article | createArticlePayload | updateArticlePayload | deleteArticlePayload | Book | createBookPayload | updateBookPayload | deleteBookPayload | Contacts | createContactPayload | updateContactPayload | deleteContactPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | ImportContentImportconfig | updateImportconfigPayload | deleteImportconfigPayload | ImportContentImporteditem | updateImporteditemPayload | deleteImporteditemPayload

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createBook(input: createBookInput): createBookPayload
  updateBook(input: updateBookInput): updateBookPayload
  deleteBook(input: deleteBookInput): deleteBookPayload
  createContact(input: createContactInput): createContactPayload
  updateContact(input: updateContactInput): updateContactPayload
  deleteContact(input: deleteContactInput): deleteContactPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  updateImportconfig(input: updateImportconfigInput): updateImportconfigPayload
  deleteImportconfig(input: deleteImportconfigInput): deleteImportconfigPayload
  updateImporteditem(input: updateImporteditemInput): updateImporteditemPayload
  deleteImporteditem(input: deleteImporteditemInput): deleteImporteditemPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
}

type Query {
  article(id: ID!): Article
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  book(id: ID!): Book
  books(sort: String, limit: Int, start: Int, where: JSON): [Book]
  contact(id: ID!): Contacts
  contacts(sort: String, limit: Int, start: Int, where: JSON): [Contacts]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  importconfig(id: ID!): ImportContentImportconfig
  importconfigs(sort: String, limit: Int, start: Int, where: JSON): [ImportContentImportconfig]
  importeditem(id: ID!): ImportContentImporteditem
  importeditems(sort: String, limit: Int, start: Int, where: JSON): [ImportContentImporteditem]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Article
}

input updateBookInput {
  where: InputID
  data: editBookInput
}

type updateBookPayload {
  book: Book
}

input updateContactInput {
  where: InputID
  data: editContactInput
}

type updateContactPayload {
  contact: Contacts
}

input updateImportconfigInput {
  where: InputID
  data: editImportconfigInput
}

type updateImportconfigPayload {
  importconfig: ImportContentImportconfig
}

input updateImporteditemInput {
  where: InputID
  data: editImporteditemInput
}

type updateImporteditemPayload {
  importeditem: ImportContentImporteditem
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  id: ID!
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  id: ID!
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}
